name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - testing
        - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  REPOSITORY: simple-webapp
  SERVICE: simple-webapp
  REGION: us-central1

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.environment || 'development' }}
    
    environment: ${{ matrix.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with: 
        submodules: false

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: Create Artifact Registry repository if not exists
      run: |
        gcloud artifacts repositories create ${{ env.REPOSITORY }} \
          --repository-format=docker \
          --location=${{ env.GAR_LOCATION }} \
          --description="Docker repository for simple-webapp" || true

    - name: Build and push Docker image
      run: |
        # Set environment-specific variables
        case "${{ matrix.environment }}" in
          "development")
            NODE_ENV="development"
            SERVICE_SUFFIX="dev"
            ;;
          "testing")
            NODE_ENV="testing"
            SERVICE_SUFFIX="test"
            ;;
          "production")
            NODE_ENV="production"
            SERVICE_SUFFIX="prod"
            ;;
        esac
        
        IMAGE_URI="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
        
        docker build \
          --build-arg NODE_ENV=${NODE_ENV} \
          --build-arg APP_VERSION=${{ github.sha }} \
          --build-arg BUILD_NUMBER=${{ github.run_number }} \
          -t ${IMAGE_URI} .
          
        docker push ${IMAGE_URI}
        
        echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
        echo "SERVICE_NAME=${{ env.SERVICE }}-${SERVICE_SUFFIX}" >> $GITHUB_ENV
        echo "NODE_ENV=${NODE_ENV}" >> $GITHUB_ENV

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.IMAGE_URI }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars NODE_ENV=${{ env.NODE_ENV }} \
          --port 3000 \
          --memory 512Mi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --timeout 300 \
          --concurrency 80 \
          --labels environment=${{ matrix.environment }},project=simple-webapp

    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        echo "SERVICE_URL=${SERVICE_URL}" >> $GITHUB_ENV
        echo "service-url=${SERVICE_URL}" >> $GITHUB_OUTPUT

    - name: Test deployment
      run: |
        echo "Testing deployment at: ${{ env.SERVICE_URL }}"
        
        # Wait for service to be ready
        sleep 30
        
        # Test main endpoint
        curl -f "${{ env.SERVICE_URL }}/" || exit 1
        
        # Test health endpoint
        curl -f "${{ env.SERVICE_URL }}/health" || exit 1
        
        echo "âœ… Deployment test successful!"

    - name: Store deployment info
      uses: ./.github/actions/store-deployment-info
      with:
        environment: ${{ matrix.environment }}
        service-url: ${{ steps.get-url.outputs.service-url }}
        image-uri: ${{ env.IMAGE_URI }}
        
    - name: Comment deployment URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Deployment Preview Ready!**
            
            **Environment:** ${{ matrix.environment }}
            **URL:** ${{ env.SERVICE_URL }}
            **Image:** \`${{ env.IMAGE_URI }}\`
            
            Test the endpoints:
            - Main: ${{ env.SERVICE_URL }}/
            - Health: ${{ env.SERVICE_URL }}/health`
          })